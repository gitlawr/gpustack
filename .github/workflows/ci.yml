name: CI

on:
  push:
    branches: [main]
    tags: ["*.*.*"]
    paths-ignore:
      - "mkdocs.yml"
      - "docs/**"
      - "**.md"
      - "**.mdx"
      - "**.png"
      - "**.jpg"
      - "**.gif"

jobs:
  linux-macos:
    timeout-minutes: 20
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [linux, darwin]
    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry/artifacts
            ~/.cache/pypoetry/repository
            ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      - name: Run CI build
        run: |
          make ci
        env:
          BUILD_OS: ${{ matrix.os }}

      - name: Upload wheel as artifact
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-dist
          path: dist/*.whl
          retention-days: 5

      - name: Release GitHub Assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') && matrix.python-version == '3.11'
        with:
          # Draft for official releases to prepare and review release notes before publishing
          draft: ${{ !contains(github.ref, 'rc') }}
          fail_on_unmatched_files: true
          prerelease: ${{ contains(github.ref, 'rc') }}
          files: dist/*.whl

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/') && matrix.python-version == '3.11' && !contains(github.ref, 'rc')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.CI_PYPI_API_TOKEN }}
          PUBLISH_SOURCE: ${{ matrix.os == 'linux' && '1' || '' }}
        run: |
          make publish-pypi

  windows-amd64:
    timeout-minutes: 20
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: CI
        shell: powershell
        run: |
          make ci

      - name: Upload wheel as artifact
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist
          path: dist/*.whl
          retention-days: 5

      - name: Release GitHub Assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') && matrix.python-version == '3.11'
        with:
          # Draft for official releases to prepare and review release notes before publishing
          draft: ${{ !contains(github.ref, 'rc') }}
          fail_on_unmatched_files: true
          prerelease: ${{ contains(github.ref, 'rc') }}
          files: dist/*.whl

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/') && matrix.python-version == '3.11' && !contains(github.ref, 'rc')
        shell: powershell
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.CI_PYPI_API_TOKEN }}
        run: |
          make publish-pypi

  publish-docker:
    permissions:
      contents: write
      actions: read
      id-token: write
    timeout-minutes: 60
    runs-on: ubuntu-22.04
    env:
      PACKAGE_REGISTRY: ${{ vars.PACKAGE_REGISTRY || 'gpustack'}}
      PACKAGE_IMAGE: ${{ vars.PACKAGE_IMAGE || 'gpustack' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Run CI build
        run: |
          make ci
      - name: Free Space
        run: |
          # Get more space for docker build.
          poetry cache clear _default_cache --all
          rm -rf $(poetry env info --path)
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:qemu-v7.0.0
          platforms: "arm64"
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.CI_DOCKERHUB_USERNAME }}
          password: ${{ secrets.CI_DOCKERHUB_PASSWORD }}
      - name: Get Metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.PACKAGE_REGISTRY }}/${{ env.PACKAGE_IMAGE }}
      - name: Package
        uses: docker/build-push-action@v5
        id: package
        with:
          push: ${{ github.event_name != 'pull_request' }}
          file: ${{ github.workspace }}/Dockerfile
          context: ${{ github.workspace }}
          platforms: "linux/amd64,linux/arm64"
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          provenance: true
          sbom: true
